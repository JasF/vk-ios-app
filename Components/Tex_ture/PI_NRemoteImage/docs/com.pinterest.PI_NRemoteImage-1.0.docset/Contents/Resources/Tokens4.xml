<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/PINRemoteImageManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/PINRemoteImageManager</TokenIdentifier>
			<Abstract type="html">An image downloading, processing and caching manager. It uses the concept of download and processing tasks to ensure that even if multiple calls to download or process an image are made, it only occurs one time (unless an item is no longer in the cache). PINRemoteImageManager is backed by GCD and safe to access from multiple threads simultaneously. It ensures that images are decoded off the main thread so that animation performance isn&apos;t affected. None of its exposed methods allow for synchronous access. However, it is optimized to call completions on the calling thread if an item is in its memory cache. *</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
            
			
			<NodeRef refid="4"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/initWithSessionConfiguration:</TokenIdentifier>
			<Abstract type="html">Create and return a PINRemoteImageManager created with the specified configuration. If configuration is nil, [NSURLSessionConfiguration defaultConfiguration] is used. Specify a custom configuration if you need to configure timeout values, cookie policies, additional HTTP headers, etc.</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (nonnull instancetype)initWithSessionConfiguration:(nullable NSURLSessionConfiguration *)configuration</Declaration>
			<Parameters>
				<Parameter>
					<Name>configuration</Name>
					<Abstract type="html">The configuration used to create the PINRemoteImageManager.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A PINRemoteImageManager with the specified configuration.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithSessionConfiguration:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/initWithSessionConfiguration:alternativeRepresentationProvider:</TokenIdentifier>
			<Abstract type="html">Create and return a PINRemoteImageManager with the specified configuration and alternative representation delegate. If configuration is nil, [NSURLSessionConfiguration defaultConfiguration] is used. Specify a custom configuration if you need to configure timeout values, cookie policies, additional HTTP headers, etc. If alternativeRepresentationProvider is nil, the default is used (and supports FLAnimatedImage).</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (nonnull instancetype)initWithSessionConfiguration:(nullable NSURLSessionConfiguration *)configuration alternativeRepresentationProvider:(nullable id&lt;PINRemoteImageManagerAlternateRepresentationProvider&gt;)alternateRepDelegate</Declaration>
			<Parameters>
				<Parameter>
					<Name>configuration</Name>
					<Abstract type="html">The configuration used to create the PINRemoteImageManager.</Abstract>
				</Parameter><Parameter>
					<Name>alternativeRepDelegate</Name>
					<Abstract type="html">a delegate which conforms to the PINRemoteImageManagerAlternateRepresentationProvider protocol. Provide a delegate if you want to have non image results. @see PINAlternativeRepresentationDelaget for an example.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A PINRemoteImageManager with the specified configuration.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithSessionConfiguration:alternativeRepresentationProvider:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PINRemoteImageManager/sharedImageManager</TokenIdentifier>
			<Abstract type="html">Get the shared instance of PINRemoteImageManager</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>+ (nonnull instancetype)sharedImageManager</Declaration>
			
			<ReturnValue><Abstract type="html">Shared instance of PINRemoteImageManager</Abstract></ReturnValue>
			<Anchor>//api/name/sharedImageManager</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PINRemoteImageManager/setSharedImageManagerWithConfiguration:</TokenIdentifier>
			<Abstract type="html">Sets the shared instance of PINRemoteImageManager to an instance with the supplied configuration. If configuration is nil, [NSURLSessionConfiguration defaultConfiguration] is used. You specify a custom configuration if you need to configure timeout values, cookie policies, additional HTTP headers, etc. This method should not be used if the shared instance has already been created.</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>+ (void)setSharedImageManagerWithConfiguration:(nullable NSURLSessionConfiguration *)configuration</Declaration>
			<Parameters>
				<Parameter>
					<Name>configuration</Name>
					<Abstract type="html">The configuration used to create the PINRemoteImageManager.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setSharedImageManagerWithConfiguration:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/defaultImageCache</TokenIdentifier>
			<Abstract type="html">The result of this method is assigned to self.cache in init. If you wish to provide a customized cache to the manager you can subclass PINRemoteImageManager and return a custom PINCache from this method.</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (nonnull PINCache *)defaultImageCache</Declaration>
			
			<ReturnValue><Abstract type="html">An instance of a PINCache object.</Abstract></ReturnValue>
			<Anchor>//api/name/defaultImageCache</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/setAuthenticationChallenge:</TokenIdentifier>
			<Abstract type="html">Set the Authentication Challenge Block.</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (void)setAuthenticationChallenge:(nullable PINRemoteImageManagerAuthenticationChallenge)challengeBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>challengeBlock</Name>
					<Abstract type="html">A PINRemoteImageManagerAuthenticationChallenge block.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setAuthenticationChallenge:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/setHighQualityBPSThreshold:completion:</TokenIdentifier>
			<Abstract type="html">Set the minimum BPS to download the highest quality image in a set.</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/downloadImageWithURLs:options:progressImage:completion:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)setHighQualityBPSThreshold:(float)highQualityBPSThreshold completion:(nullable dispatch_block_t)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>highQualityBPSThreshold</Name>
					<Abstract type="html">bytes per second minimum. Defaults to 500000.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">Completion to be called once highQualityBPSThreshold has been set.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setHighQualityBPSThreshold:completion:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/setLowQualityBPSThreshold:completion:</TokenIdentifier>
			<Abstract type="html">Set the maximum BPS to download the lowest quality image in a set.</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/downloadImageWithURLs:options:progressImage:completion:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)setLowQualityBPSThreshold:(float)lowQualityBPSThreshold completion:(nullable dispatch_block_t)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>lowQualityBPSThreshold</Name>
					<Abstract type="html">bytes per second maximum. Defaults to 50000.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">Completion to be called once lowQualityBPSThreshold has been set.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setLowQualityBPSThreshold:completion:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/setShouldUpgradeLowQualityImages:completion:</TokenIdentifier>
			<Abstract type="html">Set whether high quality images should be downloaded when a low quality image is cached if network connectivity has improved.</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/downloadImageWithURLs:options:progressImage:completion:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)setShouldUpgradeLowQualityImages:(BOOL)shouldUpgradeLowQualityImages completion:(nullable dispatch_block_t)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>shouldUpgradeLowQualityImages</Name>
					<Abstract type="html">if YES, low quality images will be &apos;upgraded&apos;.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">Completion to be called once shouldUpgradeLowQualityImages has been set.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setShouldUpgradeLowQualityImages:completion:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/setMaxNumberOfConcurrentOperations:completion:</TokenIdentifier>
			<Abstract type="html">Set the maximum number of concurrent operations (decompressing images, creating gifs, etc).</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (void)setMaxNumberOfConcurrentOperations:(NSInteger)maxNumberOfConcurrentOperations completion:(nullable dispatch_block_t)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>maxNumberOfConcurrentOperations</Name>
					<Abstract type="html">The maximum number of concurrent operations. Defaults to NSOperationQueueDefaultMaxConcurrentOperationCount.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">Completion to be called once maxNumberOfConcurrentOperations is set.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setMaxNumberOfConcurrentOperations:completion:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/setMaxNumberOfConcurrentDownloads:completion:</TokenIdentifier>
			<Abstract type="html">Set the maximum number of concurrent downloads.</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (void)setMaxNumberOfConcurrentDownloads:(NSInteger)maxNumberOfConcurrentDownloads completion:(nullable dispatch_block_t)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>maxNumberOfConcurrentDownloads</Name>
					<Abstract type="html">The maximum number of concurrent downloads. Defaults to 10.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">Completion to be called once maxNumberOfConcurrentDownloads is set.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setMaxNumberOfConcurrentDownloads:completion:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/setEstimatedRemainingTimeThresholdForProgressiveDownloads:completion:</TokenIdentifier>
			<Abstract type="html">Set the estimated time remaining to download threshold at which to generate progressive images. Progressive images previews will only be generated if the estimated remaining time on a download is greater than estimatedTimeRemainingThreshold. If estimatedTimeRemainingThreshold is less than zero, this check is skipped.</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (void)setEstimatedRemainingTimeThresholdForProgressiveDownloads:(NSTimeInterval)estimatedRemainingTimeThreshold completion:(nullable dispatch_block_t)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>estimatedRemainingTimeThreshold</Name>
					<Abstract type="html">The estimated remaining time threshold used to decide to skip progressive rendering. Defaults to 0.1.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">Completion to be called once estimatedTimeRemainingTimeThreshold is set.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setEstimatedRemainingTimeThresholdForProgressiveDownloads:completion:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/setProgressThresholds:completion:</TokenIdentifier>
			<Abstract type="html">Sets the progress at which progressive images are generated. By default this is @[@0.00, @0.35, @0.65] which generates at most, 3 progressive images. The first progressive image will only be generated when at least one scan has been completed (so you never see half an image).</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (void)setProgressThresholds:(nonnull NSArray&lt;NSNumber*&gt; *)progressThresholds completion:(nullable dispatch_block_t)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>progressThresholds</Name>
					<Abstract type="html">an array of progress thresholds at which to generate progressive images. progress thresholds should range from 0.00 - 1.00. Defaults to @[@0.00, @0.35, @0.65]</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">Completion to be called once progressThresholds is set.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setProgressThresholds:completion:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/setProgressiveRendersShouldBlur:completion:</TokenIdentifier>
			<Abstract type="html">Sets whether PINRemoteImage should blur progressive render results</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (void)setProgressiveRendersShouldBlur:(BOOL)shouldBlur completion:(nullable dispatch_block_t)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>shouldBlur</Name>
					<Abstract type="html">A bool value indicating whether PINRemoteImage should blur progressive render results</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">Completion to be called once progressThresholds is set.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setProgressiveRendersShouldBlur:completion:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/setProgressiveRendersMaxProgressiveRenderSize:completion:</TokenIdentifier>
			<Abstract type="html">Sets the maximum size of an image that PINRemoteImage will blur. If the image is too large, blurring is skipped</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (void)setProgressiveRendersMaxProgressiveRenderSize:(CGSize)maxProgressiveRenderSize completion:(nullable dispatch_block_t)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>maxProgressiveRenderSize</Name>
					<Abstract type="html">A CGSize which indicates the max size PINRemoteImage will render a progressive image. If an image is larger in either dimension, progressive rendering will be skipped</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">Completion to be called once maxProgressiveRenderSize is set.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setProgressiveRendersMaxProgressiveRenderSize:completion:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/prefetchImageWithURL:</TokenIdentifier>
			<Abstract type="html">Prefetch an image at the given URL.</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (void)prefetchImageWithURL:(nonnull NSURL *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">NSURL where the image to prefetch resides.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/prefetchImageWithURL:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/prefetchImageWithURL:options:</TokenIdentifier>
			<Abstract type="html">Prefetch an image at the given URL with given options.</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (void)prefetchImageWithURL:(nonnull NSURL *)url options:(PINRemoteImageManagerDownloadOptions)options</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">NSURL where the image to prefetch resides.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">PINRemoteImageManagerDownloadOptions options with which to pefetch the image.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/prefetchImageWithURL:options:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/prefetchImagesWithURLs:</TokenIdentifier>
			<Abstract type="html">Prefetch images at the given URLs.</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (void)prefetchImagesWithURLs:(nonnull NSArray&lt;NSURL*&gt; *)urls</Declaration>
			<Parameters>
				<Parameter>
					<Name>urls</Name>
					<Abstract type="html">An array of NSURLs where the images to prefetch reside.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/prefetchImagesWithURLs:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/prefetchImagesWithURLs:options:</TokenIdentifier>
			<Abstract type="html">Prefetch images at the given URLs with given options.</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (void)prefetchImagesWithURLs:(nonnull NSArray&lt;NSURL*&gt; *)urls options:(PINRemoteImageManagerDownloadOptions)options</Declaration>
			<Parameters>
				<Parameter>
					<Name>urls</Name>
					<Abstract type="html">An array of NSURLs where the images to prefetch reside.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">PINRemoteImageManagerDownloadOptions options with which to pefetch the image.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/prefetchImagesWithURLs:options:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/downloadImageWithURL:completion:</TokenIdentifier>
			<Abstract type="html">Download or retrieve from cache the image found at the url. All completions are called on an arbitrary callback queue unless called on the main thread and the result is in the memory cache (this is an optimization to allow synchronous results for the UI when an object is cached in memory).</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (nullable NSUUID *)downloadImageWithURL:(nonnull NSURL *)url completion:(nullable PINRemoteImageManagerImageCompletion)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">NSURL where the image to download resides.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">PINRemoteImageManagerImageCompletion block to call when image has been fetched from the cache or downloaded.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSUUID which uniquely identifies this request. To be used for canceling requests and verifying that the callback is for the request you expect (see categories for example).</Abstract></ReturnValue>
			<Anchor>//api/name/downloadImageWithURL:completion:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/downloadImageWithURL:options:completion:</TokenIdentifier>
			<Abstract type="html">Download or retrieve from cache the image found at the url. All completions are called on an arbitrary callback queue unless called on the main thread and the result is in the memory cache (this is an optimization to allow synchronous results for the UI when an object is cached in memory).</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (nullable NSUUID *)downloadImageWithURL:(nonnull NSURL *)url options:(PINRemoteImageManagerDownloadOptions)options completion:(nullable PINRemoteImageManagerImageCompletion)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">NSURL where the image to download resides.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">PINRemoteImageManagerDownloadOptions options with which to fetch the image.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">PINRemoteImageManagerImageCompletion block to call when image has been fetched from the cache or downloaded.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSUUID which uniquely identifies this request. To be used for canceling requests and verifying that the callback is for the request you expect (see categories for example).</Abstract></ReturnValue>
			<Anchor>//api/name/downloadImageWithURL:options:completion:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/downloadImageWithURL:options:progressImage:completion:</TokenIdentifier>
			<Abstract type="html">Download or retrieve from cache the image found at the url. All completions are called on an arbitrary callback queue unless called on the main thread and the result is in the memory cache (this is an optimization to allow synchronous results for the UI when an object is cached in memory).</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (nullable NSUUID *)downloadImageWithURL:(nonnull NSURL *)url options:(PINRemoteImageManagerDownloadOptions)options progressImage:(nullable PINRemoteImageManagerImageCompletion)progressImage completion:(nullable PINRemoteImageManagerImageCompletion)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">NSURL where the image to download resides.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">PINRemoteImageManagerDownloadOptions options with which to fetch the image.</Abstract>
				</Parameter><Parameter>
					<Name>progressImage</Name>
					<Abstract type="html">PINRemoteImageManagerImageCompletion block which will be called to update progress of the image download.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">PINRemoteImageManagerImageCompletion block to call when image has been fetched from the cache or downloaded.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSUUID which uniquely identifies this request. To be used for canceling requests and verifying that the callback is for the request you expect (see categories for example).</Abstract></ReturnValue>
			<Anchor>//api/name/downloadImageWithURL:options:progressImage:completion:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/downloadImageWithURL:options:progressDownload:completion:</TokenIdentifier>
			<Abstract type="html">Download or retrieve from cache the image found at the url. All completions are called on an arbitrary callback queue unless called on the main thread and the result is in the memory cache (this is an optimization to allow synchronous results for the UI when an object is cached in memory).</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (nullable NSUUID *)downloadImageWithURL:(nonnull NSURL *)url options:(PINRemoteImageManagerDownloadOptions)options progressDownload:(nullable PINRemoteImageManagerProgressDownload)progressDownload completion:(nullable PINRemoteImageManagerImageCompletion)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">NSURL where the image to download resides.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">PINRemoteImageManagerDownloadOptions options with which to fetch the image.</Abstract>
				</Parameter><Parameter>
					<Name>progressDownload</Name>
					<Abstract type="html">PINRemoteImageManagerDownloadProgress block which will be called to update progress in bytes of the image download. NOTE: For performance reasons, this block is not called on the main thread every time, if you need to update your UI ensure that you dispatch to the main thread first.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">PINRemoteImageManagerImageCompletion block to call when image has been fetched from the cache or downloaded.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSUUID which uniquely identifies this request. To be used for canceling requests and verifying that the callback is for the request you expect (see categories for example).</Abstract></ReturnValue>
			<Anchor>//api/name/downloadImageWithURL:options:progressDownload:completion:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/downloadImageWithURL:options:progressImage:progressDownload:completion:</TokenIdentifier>
			<Abstract type="html">Download or retrieve from cache the image found at the url. All completions are called on an arbitrary callback queue unless called on the main thread and the result is in the memory cache (this is an optimization to allow synchronous results for the UI when an object is cached in memory).</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (nullable NSUUID *)downloadImageWithURL:(nonnull NSURL *)url options:(PINRemoteImageManagerDownloadOptions)options progressImage:(nullable PINRemoteImageManagerImageCompletion)progressImage progressDownload:(nullable PINRemoteImageManagerProgressDownload)progressDownload completion:(nullable PINRemoteImageManagerImageCompletion)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">NSURL where the image to download resides.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">PINRemoteImageManagerDownloadOptions options with which to fetch the image.</Abstract>
				</Parameter><Parameter>
					<Name>progressImage</Name>
					<Abstract type="html">PINRemoteImageManagerImageCompletion block which will be called to update progress of the image download.</Abstract>
				</Parameter><Parameter>
					<Name>progressDownload</Name>
					<Abstract type="html">PINRemoteImageManagerDownloadProgress block which will be called to update progress in bytes of the image download. NOTE: For performance reasons, this block is not called on the main thread every time, if you need to update your UI ensure that you dispatch to the main thread first.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">PINRemoteImageManagerImageCompletion block to call when image has been fetched from the cache or downloaded.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSUUID which uniquely identifies this request. To be used for canceling requests and verifying that the callback is for the request you expect (see categories for example).</Abstract></ReturnValue>
			<Anchor>//api/name/downloadImageWithURL:options:progressImage:progressDownload:completion:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/downloadImageWithURL:options:processorKey:processor:completion:</TokenIdentifier>
			<Abstract type="html">Download or retrieve from cache the image found at the url and process it before calling completion. All completions are called on an arbitrary callback queue unless called on the main thread and the result is in the memory cache (this is an optimization to allow synchronous results for the UI when an object is cached in memory).</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (nullable NSUUID *)downloadImageWithURL:(nonnull NSURL *)url options:(PINRemoteImageManagerDownloadOptions)options processorKey:(nullable NSString *)processorKey processor:(nullable PINRemoteImageManagerImageProcessor)processor completion:(nullable PINRemoteImageManagerImageCompletion)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">NSURL where the image to download resides.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">PINRemoteImageManagerDownloadOptions options with which to fetch the image.</Abstract>
				</Parameter><Parameter>
					<Name>processorKey</Name>
					<Abstract type="html">NSString key to uniquely identify processor and process. Will be used for caching processed images.</Abstract>
				</Parameter><Parameter>
					<Name>processor</Name>
					<Abstract type="html">PINRemoteImageManagerImageProcessor block which will be called to post-process downloaded image.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">PINRemoteImageManagerImageCompletion block to call when image has been fetched from the cache or downloaded.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSUUID which uniquely identifies this request. To be used for canceling requests and verifying that the callback is for the request you expect (see categories for example).</Abstract></ReturnValue>
			<Anchor>//api/name/downloadImageWithURL:options:processorKey:processor:completion:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/downloadImageWithURL:options:processorKey:processor:progressDownload:completion:</TokenIdentifier>
			<Abstract type="html">Download or retrieve from cache the image found at the url and process it before calling completion. All completions are called on an arbitrary callback queue unless called on the main thread and the result is in the memory cache (this is an optimization to allow synchronous results for the UI when an object is cached in memory).</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (nullable NSUUID *)downloadImageWithURL:(nonnull NSURL *)url options:(PINRemoteImageManagerDownloadOptions)options processorKey:(nullable NSString *)processorKey processor:(nullable PINRemoteImageManagerImageProcessor)processor progressDownload:(nullable PINRemoteImageManagerProgressDownload)progressDownload completion:(nullable PINRemoteImageManagerImageCompletion)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">NSURL where the image to download resides.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">PINRemoteImageManagerDownloadOptions options with which to fetch the image.</Abstract>
				</Parameter><Parameter>
					<Name>processorKey</Name>
					<Abstract type="html">NSString key to uniquely identify processor and process. Will be used for caching processed images.</Abstract>
				</Parameter><Parameter>
					<Name>processor</Name>
					<Abstract type="html">PINRemoteImageManagerImageProcessor block which will be called to post-process downloaded image.</Abstract>
				</Parameter><Parameter>
					<Name>progressDownload</Name>
					<Abstract type="html">PINRemoteImageManagerDownloadProgress block which will be called to update progress in bytes of the image download. NOTE: For performance reasons, this block is not called on the main thread every time, if you need to update your UI ensure that you dispatch to the main thread first.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">PINRemoteImageManagerImageCompletion block to call when image has been fetched from the cache or downloaded.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSUUID which uniquely identifies this request. To be used for canceling requests and verifying that the callback is for the request you expect (see categories for example).</Abstract></ReturnValue>
			<Anchor>//api/name/downloadImageWithURL:options:processorKey:processor:progressDownload:completion:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/downloadImageWithURLs:options:progressImage:completion:</TokenIdentifier>
			<Abstract type="html">Download or retrieve from cache one of the images found at the urls in the passed in array based on current network performance. URLs should be sorted from lowest quality image URL to highest. All completions are called on an arbitrary callback queue unless called on the main thread and the result is in the memory cache (this is an optimization to allow synchronous results for the UI when an object is cached in memory).</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (nullable NSUUID *)downloadImageWithURLs:(nonnull NSArray&lt;NSURL*&gt; *)urls options:(PINRemoteImageManagerDownloadOptions)options progressImage:(nullable PINRemoteImageManagerImageCompletion)progressImage completion:(nullable PINRemoteImageManagerImageCompletion)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>urls</Name>
					<Abstract type="html">An array of NSURLs of increasing size.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">PINRemoteImageManagerDownloadOptions options with which to fetch the image.</Abstract>
				</Parameter><Parameter>
					<Name>progressImage</Name>
					<Abstract type="html">PINRemoteImageManagerImageCompletion block which will be called to update progress of the image download.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">PINRemoteImageManagerImageCompletion block to call when image has been fetched from the cache or downloaded.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSUUID which uniquely identifies this request. To be used for canceling requests and verifying that the callback is for the request you expect (see categories for example).</Abstract></ReturnValue>
			<Anchor>//api/name/downloadImageWithURLs:options:progressImage:completion:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/cacheKeyForURL:processorKey:</TokenIdentifier>
			<Abstract type="html">Returns the cacheKey for a given URL and processorKey. Exposed to be overridden if necessary or to be used with imageFromCacheWithCacheKey</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/imageFromCacheWithCacheKey:completion:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (nonnull NSString *)cacheKeyForURL:(nonnull NSURL *)url processorKey:(nullable NSString *)processorKey</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">NSURL to be downloaded</Abstract>
				</Parameter><Parameter>
					<Name>processorKey</Name>
					<Abstract type="html">NSString key to uniquely identify processor and process.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">returns an NSString which is the key used for caching.</Abstract></ReturnValue>
			<Anchor>//api/name/cacheKeyForURL:processorKey:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/imageFromCacheWithCacheKey:completion:</TokenIdentifier>
			<Abstract type="html">imageFromCacheWithCacheKey:options:completion: instead
@deprecated</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/imageFromCacheWithCacheKey:options:completion:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)imageFromCacheWithCacheKey:(nonnull NSString *)cacheKey completion:(nonnull PINRemoteImageManagerImageCompletion)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>cacheKey</Name>
					<Abstract type="html">NSString key to look up image in the cache.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">PINRemoteImageManagerImageCompletion block to call when image has been fetched from the cache.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/imageFromCacheWithCacheKey:completion:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/imageFromCacheWithCacheKey:options:completion:</TokenIdentifier>
			<Abstract type="html">Directly get an image from the underlying cache.</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/cacheKeyForURL:processorKey:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)imageFromCacheWithCacheKey:(nonnull NSString *)cacheKey options:(PINRemoteImageManagerDownloadOptions)options completion:(nonnull PINRemoteImageManagerImageCompletion)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>cacheKey</Name>
					<Abstract type="html">NSString key to look up image in the cache.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">options will be used to determine if the cached image should be decompressed or FLAnimatedImages should be returned.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">PINRemoteImageManagerImageCompletion block to call when image has been fetched from the cache.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/imageFromCacheWithCacheKey:options:completion:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/synchronousImageFromCacheWithCacheKey:options:</TokenIdentifier>
			<Abstract type="html">Directly get an image from the underlying memory cache synchronously.</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/cacheKeyForURL:processorKey:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (nonnull PINRemoteImageManagerResult *)synchronousImageFromCacheWithCacheKey:(nonnull NSString *)cacheKey options:(PINRemoteImageManagerDownloadOptions)options</Declaration>
			<Parameters>
				<Parameter>
					<Name>cacheKey</Name>
					<Abstract type="html">NSString key to look up image in the cache.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">options will be used to determine if the cached image should be decompressed or FLAnimatedImages should be returned.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A PINRemoteImageManagerResult</Abstract></ReturnValue>
			<Anchor>//api/name/synchronousImageFromCacheWithCacheKey:options:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/cancelTaskWithUUID:</TokenIdentifier>
			<Abstract type="html">Cancel a download. Canceling will only cancel the download if all other downloads are also canceled with their associated UUIDs. Canceling does not guarantee that your completion will not be called. You can use the UUID provided on the result object verify the completion you want called is being called.</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/PINRemoteImageCategoryManager</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)cancelTaskWithUUID:(nonnull NSUUID *)UUID</Declaration>
			<Parameters>
				<Parameter>
					<Name>UUID</Name>
					<Abstract type="html">NSUUID of the task to cancel.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cancelTaskWithUUID:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/setPriority:ofTaskWithUUID:</TokenIdentifier>
			<Abstract type="html">Set the priority of a download task. Since there is only one task per download, the priority of the download task will always be the last priority this method was called with.</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (void)setPriority:(PINRemoteImageManagerPriority)priority ofTaskWithUUID:(nonnull NSUUID *)UUID</Declaration>
			<Parameters>
				<Parameter>
					<Name>priority</Name>
					<Abstract type="html">priority to set on the task.</Abstract>
				</Parameter><Parameter>
					<Name>UUID</Name>
					<Abstract type="html">NSUUID of the task to set the priority on.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setPriority:ofTaskWithUUID:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PINRemoteImageManager/setProgressImageCallback:ofTaskWithUUID:</TokenIdentifier>
			<Abstract type="html">set the progress callback on a download task. You can use this to add progress callbacks or remove them for in flight downloads</Abstract>
			<DeclaredIn>PINRemoteImageManager.h</DeclaredIn>
			
			<Declaration>- (void)setProgressImageCallback:(nullable PINRemoteImageManagerImageCompletion)progressImageCallback ofTaskWithUUID:(nonnull NSUUID *)UUID</Declaration>
			<Parameters>
				<Parameter>
					<Name>progressImageCallback</Name>
					<Abstract type="html">a PINRemoteImageManagerImageCompletion block to be called with a progress update</Abstract>
				</Parameter><Parameter>
					<Name>UUID</Name>
					<Abstract type="html">NSUUID of the task to set the priority on.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setProgressImageCallback:ofTaskWithUUID:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
        
        
	</File>
</Tokens>